WEBVTT
Kind: captions
Language: pt-BR

00:00:04.060 --> 00:00:09.049
Isso aqui deveria ser bem familiar para nós agora:
Um sistema de coordenadas rotulado A e um único

00:00:09.049 --> 00:00:15.969
ponto. Nós podemos descrever o ponto por um vetor
em relação ao sistema A. A letra A em

00:00:15.969 --> 00:00:22.160
cima do P indica isso. Eu posso escrever
esse vetor em termos de suas componentes - suas

00:00:22.160 --> 00:00:32.329
distâncias ao longo do eixo XA e do eixo YA
e os vetores unitários XA e YA com chapéu. Agora, vamos

00:00:32.329 --> 00:00:38.000
introduzir um novo sistema de coordenads, o sistema B,
e ele tem a mesma origem que é rotacionada

00:00:38.000 --> 00:00:44.940
pelo ângulo Theta. Eu posso descrever o ponto
por um vetor em relação ao sistema de coordenadas

00:00:44.940 --> 00:00:52.620
B e eu posso escrevê-lo em termos dos vetores
unitários XB e YB de chapéu, e eles estão indicados


00:00:52.620 --> 00:01:00.440
aqui em vermelho. Eu posso escrever expressões para XB
de chapéu em termos do cosseno de Theta e do seno de Theta,

00:01:00.440 --> 00:01:06.869
e eu possso escrever uma expressão para YB de chapéu
em termos de menos o seno de Theta e o cosseno de Theta. Se

00:01:06.869 --> 00:01:14.210
Eu substituo essas duas equações aqui, eu posso
escrever essa expressão. Então eu posso expandir,

00:01:14.210 --> 00:01:20.729
rearranjar e fatorar XA de chapéu e YA de chapéu.
A próxima coisa a se observar é que pelo fato desses

00:01:20.729 --> 00:01:27.689
dois sistemas de coordenadas compartilharem uma origem,
então o vetor AP e BP são de fato exatamente o

00:01:27.689 --> 00:01:35.770
mesmo. Os coeficientes de XA de chapéu devem ser os
mesmos, para que nós possamos escrever isso. E, os coeficientes

00:01:35.770 --> 00:01:41.909
de YA de chapéu devem ser os mesmos, para que nós 
possamos escrever isso. Vamos pegar essas duas expressões.

00:01:41.909 --> 00:01:47.039
Simplifique as coisas um pouco e nós podemos agora
escrever isto na forma matricial. Se você está um pouco

00:01:47.039 --> 00:01:50.770
em dúvida sobre esse passo, então apenas multiplique
e você irá descobrir que chegou às

00:01:50.770 --> 00:01:56.229
expressões acima. Agora, vamos escrever a parte
vetorial de forma mais concosa. Ao invés de em termos de

00:01:56.229 --> 00:02:01.749
seus elementos individuais, nós escrevemos como o 
símbolo P em relação a um sistema de coordenadas 

00:02:01.749 --> 00:02:08.400
particular. Então, essa expressão relaciona o vetor
em relação ao sistema B com o vetor em 

00:02:08.400 --> 00:02:16.689
relação ao sistema A. Isso é alcanado multiplicando
os componentes do vetor B por essa matriz

00:02:16.689 --> 00:02:19.709
2x2.
Podemos tornar essa expressão ainda mais concisa

00:02:19.709 --> 00:02:25.709
e escrevê-la assim. e, nós introduzimos 
o símbolo T para representar uma matriz de rotação.

00:02:25.709 --> 00:02:32.170
Essa é uma forma bem concisa de representar
a relação entre dois vetores em diferentes 

00:02:32.170 --> 00:02:38.140
sistemas de coordenadas, e eles estão relacionados
por uma matriz de rotação R. Aqui nós temos a mesma

00:02:38.140 --> 00:02:44.069
expressão de antes, e para ser mais preciso, 
um pouco mais cuidadosamente, nós vamos adicionar alguns

00:02:44.069 --> 00:02:51.110
rótulos para a matriz R e vamos colocar um A
em cima e um B embaixo. Em isso indica que

00:02:51.110 --> 00:02:57.170
R é uma matriz de rotação que rotaciona um vetor
do sistema B para o sistema A. É importante

00:02:57.170 --> 00:03:03.519
notar e não se confundir com isso: a matriz
R depende do ângulo de rotação do sistema

00:03:03.519 --> 00:03:08.840
A para o sistema B. A ordem dessas duas coisas
é diferente então não se engane com 

00:03:08.840 --> 00:03:12.250
isso.
Vamos dar uma olhada na matriz de rotação.

00:03:12.250 --> 00:03:19.110
Uma matriz assim é referda como uma matriz ortogonal 
ou algumas vezes como uma matriz ortonormal.

00:03:19.110 --> 00:03:24.020
Cada coluna nessa matriz é um vetor unitário
e você pode mostrar isso por conta própria bem

00:03:24.020 --> 00:03:29.890
facilmente. Cada coluna na matriz é ortogonal 
às outras colunas. Nesse caso, há

00:03:29.890 --> 00:03:35.050
somente duas colunas e você pode mostrar, de novo
muito facilmente, que o vetor formado pela primeira

00:03:35.050 --> 00:03:40.530
coluna é ortogonal ao vetor formado 
pela segunda coluna. O produto escalar dessas

00:03:40.530 --> 00:03:46.030
duas colunas vap ser igual a zero. Uma propriedade
realmente útil de uma matriz ortogonal é 

00:03:46.030 --> 00:03:52.670
que sua inversa é igual a sua transposta.
Calcular a inversa de uma matriz é bastante

00:03:52.670 --> 00:03:57.110
complexo, enquanto que calcular sua transposta
é realmente muito simples. Então, é ótimo que

00:03:57.110 --> 00:04:03.280
temos uma matriz cuja inversa pode ser calculada
de forma muito simples transpondo os elementos

00:04:03.280 --> 00:04:06.859
da matriz.
Outra propriedade da matriz de rotação é 

00:04:06.859 --> 00:04:13.060
que seu determinante é sempre igual a 1.
E isso significa que, se eu multiplicar qualquer vetor

00:04:13.060 --> 00:04:17.870
by this matrix, the length of the vector is
unchanged. That’s an important property

00:04:17.870 --> 00:04:22.620
of a rotation matrix. When I rotate a vector
from one coordinate frame to another, its

00:04:22.620 --> 00:04:28.060
length is not changed. A mathematician would
say that a rotation matrix like this belongs

00:04:28.060 --> 00:04:33.840
to the special orthogonal group of dimension
two. And, symbolically, we’d write that

00:04:33.840 --> 00:04:41.180
as R is an element of - belongs to - the set
SO(2), special orthogonal group of dimension

00:04:41.180 --> 00:04:47.200
2. Here’s the expression from above. And,
if I take the rotation matrix across the other

00:04:47.200 --> 00:04:52.330
side of the equal sign, I can write this.
This indicates that if I want to rotate a

00:04:52.330 --> 00:04:58.759
vector from coordinate frame A into coordinate
frame B, I use the inverse of the rotation

00:04:58.759 --> 00:05:05.700
matrix from coordinate frame A to coordinate
frame B. And, remember, that the inverse of

00:05:05.700 --> 00:05:11.419
a rotation matrix is simply its transpose.
The labels A and B in this first expression

00:05:11.419 --> 00:05:16.270
are completely general and it’s completely
proper for me to swap the A and the B and

00:05:16.270 --> 00:05:21.340
now I can write this. These two equations
are equivalent. So, now I can write this and

00:05:21.340 --> 00:05:26.479
this is really important. What it says is
the rotation matrix from coordinate frame

00:05:26.479 --> 00:05:31.610
B to coordinate frame A is the inverse of
the rotation matrix from coordinate frame

00:05:31.610 --> 00:05:37.960
A to coordinate frame B. Let’s have a look
at some concrete examples of this in MATLAB.

00:05:37.960 --> 00:05:43.800
First of all, I’m going to create a two-dimensional
rotation matrix using the Toolbox command

00:05:43.800 --> 00:05:49.819
rot2 for rotation matrix in two dimensions.
And, I’m going to ask for a rotation angle

00:05:49.819 --> 00:05:55.699
of 0 radians. And, here is the 2 x 2 rotation
matrix and it is the identity matrix. It’s

00:05:55.699 --> 00:06:01.289
got 1s on the diagonal and 0s on the off diagonal.
I can ask for a rotation that corresponds

00:06:01.289 --> 00:06:06.550
to an angle say of nought point 2 radians
and this is that rotation matrix. I can also

00:06:06.550 --> 00:06:13.020
specify the angle in degrees. So, for instance,
I could ask for the angle R of 30 degrees

00:06:13.020 --> 00:06:17.490
and this is the corresponding rotation matrix.
What I’m going to do is to put that result

00:06:17.490 --> 00:06:24.270
in to the workspace variable R and here is
the rotation matrix again for a rotation of

00:06:24.270 --> 00:06:29.560
positive 30 degrees. Now, we talked a moment
ago about this rotation matrix having a number

00:06:29.560 --> 00:06:33.979
of properties, and one of the properties was
that the columns are orthogonal. So, I’m

00:06:33.979 --> 00:06:39.479
going to create a variable which represents
the first column of a matrix, another variable

00:06:39.479 --> 00:06:44.400
which corresponds to the second column of
the matrix. And, if I look at the dot product

00:06:44.400 --> 00:06:49.110
of those two vectors, we can see that it is
equal to 0. Another property that we mentioned

00:06:49.110 --> 00:06:54.490
is that the determinant of the matrix is equal
to positive 1 and we can quite easily verify

00:06:54.490 --> 00:06:58.870
that. Another property we talked about is
that the inverse of the matrix is the same

00:06:58.870 --> 00:07:03.660
as its transpose. So, the inverse of the matrix
is computed using the MATLAB built in function

00:07:03.660 --> 00:07:08.770
inv, and the transpose is computed using the
quote operator just like that and we can see

00:07:08.770 --> 00:07:12.629
quite clearly that the inverse is equal to
the transpose.

00:07:12.629 --> 00:07:18.680
Finally, we can visualize this rotation matrix
as a rotated coordinate frame. To do that,

00:07:18.680 --> 00:07:23.760
I use the Toolbox function, trplot2. It’s
a short for transform plot in two dimensions.

00:07:23.760 --> 00:07:28.950
I pass in the rotation matrix that I’m interested
in and there is a representation of the coordinate

00:07:28.950 --> 00:07:35.830
frame. Now, it looks a little bit odd because
I need to set the axis scaling to equal and

00:07:35.830 --> 00:07:41.550
here we see a right angled coordinate frame
shown here in blue and we can see that it

00:07:41.550 --> 00:07:44.669
is rotated with respect to the world coordinate
frame.

